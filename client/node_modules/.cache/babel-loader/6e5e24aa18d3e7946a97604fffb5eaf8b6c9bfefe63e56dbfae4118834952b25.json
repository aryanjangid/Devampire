{"ast":null,"code":"// import React from 'react'\nimport * as api from '../api';\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    dispatch({\n      type: \"FETCH_ALL_QUESTIONS\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const voteQuestion = (id, value, userId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.voteQuestion(id, value, userId);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswered,\n      userId\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered, userId);\n    dispatch({\n      type: 'POST_ANSWER',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {}\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","getAllQuestions","deleteQuestion","id","voteQuestion","value","userId","postAnswer","answerData","noOfAnswers","answerBody","userAnswered","deleteAnswer","answerId"],"sources":["/Users/pranavmachindrakale/Desktop/Full Stack Web Developement/Stack_Overflow_Clone/client/src/actions/question.js"],"sourcesContent":["// import React from 'react'\nimport * as api from '../api'\n\nexport const askQuestion = (questionData, navigate) => async (dispatch) => {\n    try {\n        const { data } = await api.postQuestion(questionData)\n        dispatch({ type: \"POST_QUESTION\", payload: data})\n        dispatch(fetchAllQuestions())\n        navigate('/')\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const fetchAllQuestions = () => async (dispatch) => {\n    try {\n        const {data} = await api.getAllQuestions()\n        dispatch({ type: \"FETCH_ALL_QUESTIONS\", payload: data})\n    } catch (error) {\n        console.log(error)\n    }\n} \n\nexport const deleteQuestion = (id, navigate) => async (dispatch) => {\n    try {\n        const { data } = api.deleteQuestion(id)\n        dispatch(fetchAllQuestions())\n        navigate('/')\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const voteQuestion = (id, value, userId) => async (dispatch) => {\n    try {\n        const { data } = await api.voteQuestion(id, value, userId)\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const postAnswer = (answerData) => async (dispatch) => {\n    try {\n        const { id, noOfAnswers, answerBody, userAnswered, userId } = answerData\n        const { data } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered, userId )\n        dispatch({ type: 'POST_ANSWER', payload: data})\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        \n    }  \n}\n\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async (dispatch) => {\n    try {\n        const { data } = await api.deleteAnswer(id, answerId, noOfAnswers)\n        dispatch(fetchAllQuestions())\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}