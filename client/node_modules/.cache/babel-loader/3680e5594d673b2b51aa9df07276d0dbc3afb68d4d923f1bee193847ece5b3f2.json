{"ast":null,"code":"var _jsxFileName = \"/Users/pranavmachindrakale/Desktop/Full Stack Web Developement/Stack_Overflow_Clone/client/src/Pages/Questions/DisplayAnswer.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport Avatar from '../../components/Avatar/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayAnswer = _ref => {\n  let {\n    question,\n    handleShare\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: question.answer.map(ans => {\n      var _User, _User$result;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-ans\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: ans.answerBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-actions-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleShare,\n              children: \"Share\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 19\n            }, this), ((_User = User) === null || _User === void 0 ? void 0 : (_User$result = _User.result) === null || _User$result === void 0 ? void 0 : _User$result._id) === (ans === null || ans === void 0 ? void 0 : ans.userId) && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleDelete,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"answered \", moment(question.answeredOn).fromNow()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/User/${question.userId}`,\n              className: \"user-link\",\n              style: {\n                color: '#0086d8'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                backgroundColor: \"green\",\n                px: \"8px\",\n                py: \"5px\",\n                children: ans.userAnswered.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: ans.userAnswered\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 15\n        }, this)]\n      }, ans._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = DisplayAnswer;\nexport default DisplayAnswer;\nvar _c;\n$RefreshReg$(_c, \"DisplayAnswer\");","map":{"version":3,"names":["React","Link","moment","Avatar","jsxDEV","_jsxDEV","DisplayAnswer","_ref","question","handleShare","children","answer","map","ans","_User","_User$result","className","answerBody","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","User","result","_id","userId","handleDelete","answeredOn","fromNow","to","style","color","backgroundColor","px","py","userAnswered","charAt","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/pranavmachindrakale/Desktop/Full Stack Web Developement/Stack_Overflow_Clone/client/src/Pages/Questions/DisplayAnswer.jsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\n\nimport Avatar from '../../components/Avatar/Avatar'\n\nconst DisplayAnswer = ({question, handleShare}) => {\n  return (\n    <div>\n        {\n          question.answer.map((ans) => (\n            <div className=\"display-ans\" key={ans._id}>\n              <p>{ans.answerBody}</p>\n              <div className=\"question-actions-user\">\n                <div>\n                  <button type='button' onClick={handleShare}>Share</button>\n                  {\n                      User?.result?._id === ans?.userId && (\n                          <button type='button' onClick={handleDelete}>Delete</button>\n                      )\n                  }  \n                </div>\n                <div>\n                  <p>answered {moment(question.answeredOn).fromNow()}</p>\n                  <Link to={`/User/${question.userId}`} className='user-link' style={{color:'#0086d8'}}>\n                      <Avatar backgroundColor='green' px='8px' py='5px'>{ans.userAnswered.charAt(0).toUpperCase()}</Avatar>\n                      <div>\n                          {ans.userAnswered}\n                      </div>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))\n        }    \n    </div>\n  )\n}\n\nexport default DisplayAnswer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}